% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download_pagespeed.R
\name{download_pagespeed}
\alias{download_pagespeed}
\title{Download Pagespeed report}
\usage{
download_pagespeed(url, key = Sys.getenv("PAGESPEED_API_KEY"),
  output_type = "simple", api_version = 4, strategy = "desktop",
  categories = "performance", interval = 0.5,
  enhanced_lighthouse = FALSE, keep_tmp = FALSE,
  filter_third_party = NULL, locale = NULL, rule = NULL,
  screenshot = NULL, snapshots = NULL, utm_campaign = NULL,
  utm_source = NULL)
}
\arguments{
\item{url}{vector of character strings. The URLs to fetch and analyze}

\item{key}{string. Pagespeed API key to authenticate. Defaults to
"PAGESPEED_API_KEY" enviroment variable.}

\item{output_type}{string. Choose how to parse the output. Options:
"simple" or "raw". See more in Details section}

\item{api_version}{numeric. Choose which API version to generate report
from. See more in Details section}

\item{strategy}{string/character vector. The analysis strategy to use.
Options: \code{"desktop"}, \code{"mobile"},
and \code{"c("desktop", "mobile")"} to return both results in one
function call.}

\item{categories}{string. A Lighthouse categories to run.
Defaults to "performance". See more in Details section}

\item{interval}{numeric. Number of seconds to wait between multiple queries.
Defaults to 0.5 second.}

\item{enhanced_lighthouse}{logical. Set to TRUE if you want to obtain even
more data from Lighthouse. However, it can create a VERY WIDE data
frame (hundreds of columns) depending on your}

\item{keep_tmp}{logical. Set to TRUE if you need to keep temporary Rdata file
with parsed response. Defaults to FALSE}

\item{filter_third_party}{logical. Indicates if third party resources should
be filtered out before PageSpeed analysis. Defaults to NULL (= FALSE)}

\item{locale}{string. The locale used to localize formatted results}

\item{rule}{string. A PageSpeed rule to run; if none are given, all rules
are run}

\item{screenshot}{logical. Indicates if binary data containing a screenshot
should be included. Defaults to NULL (= FALSE)}

\item{snapshots}{logical. Indicates if binary data containing snapshot images
should be included. Defaults to NULL (= FALSE)}

\item{utm_campaign}{string. Campaign name for analytics. Defaults to NULL}

\item{utm_source}{string. Campaign source for analytics. Defaults to NULL}
}
\value{
two options: data frame (if "simple"), nested list (if "raw")
}
\description{
Download single or multiple URLs in variety of options.
}
\details{
The \code{output_type} parameter regulates how the output will be
    parsed and stored.
    For "simple" - formatted data frame that contains most of the data
    (scores, recommendations and error occurences).
    For "raw" - unformatted nested list that contains all the data that
    was returned by the API.


    The \code{api_version} parameter regulates which API version is to
    create the report. Legacy version 4 is now default, but it will
    change in the future as version 5 supports additional Lighthouse
    reports.

    The \code{categories} parameter works only for API version 5.
    It regulates which of the tests' categories from Lighthouse
    are to be run. You can select more than one in a vector.
    Options: "accessibility", "best-practices", "performance", "pwa",
    "seo".
}
\examples{
\dontrun{
checked_url <- download_pagespeed("https://www.google.com/")

checked_url_raw_list <- download_pagespeed(
  url = c("https://www.google.com/", "https://www.bing.com/"),
  strategy = c("desktop", "mobile"),
  output_type = "raw",
  api_version = 4)

checked_url_simple_df <- download_pagespeed(
  url = c("https://www.google.com/", "https://www.bing.com/"),
  strategy = c("desktop", "mobile"),
  api_version = 4)

}
}
